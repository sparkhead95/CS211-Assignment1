package uk.ac.aber.dcs.chh57.cs21120.assignment1;

import static org.junit.Assert.*;

import java.io.IOException;
import java.util.ArrayList;
import java.lang.reflect.*;

import org.junit.Before;
import org.junit.Test;

import uk.ac.aber.dcs.bpt.cs21120.assignment1.*;

public class SingleEliminationTest {
	
	// Create instance of the elimination method
	private IManager manager;
	// Create a local variable for the teams.txt
	private ArrayList<String> teams;
	// The below two variables are used for reflection, for when methods do not
	// return a value that we need
	// Create local variable to store the queue that is active within the
	// Imanager in use
	private ArrayQueue Queue;
	// Create variable to recognise when the competition has been completed
	private boolean endComp;	
	
	
	//create method to handle variables that need to be created to allow the tests to work
	@Before
	public void preReqs() throws NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException{
		// Attempt to store the teams.txt in a local variable. this can throw errors, so placed it in tryCatch loop
		try{
			teams = CompetitionManager.readPlayers("M:\\CS211-Assignment1\\CompetitionManager\\src\\uk\\ac\\aber\\dcs\\chh57\\cs21120\\assignment1\\Teams.txt");
		}
		catch(IOException e){
			System.out.println("system error:" + e);
		}
		
		// Define where the IManager in use is
		manager = IManagerFactory.getManager("uk.ac.aber.dcs.chh57.cs21120.assignment1.SingleElimination");
		// Set the teams to the teams contained in the .txt we are using in the tryCatch above
		manager.setPlayers(teams);
		
		// Reflection code to get the "totalPlayersQueue" from the IManager
		Field field1 = manager.getClass().getDeclaredField("totalPlayersQueue");
		// Set the variable to accessible
        field1.setAccessible(true);
        // assign it to a local variable
        Queue = (ArrayQueue) field1.get(manager);
        
        // Reflection code to get the "queueCompleted" from the IManager
        Field field2 = manager.getClass().getDeclaredField("queueCompleted");
        // Set the variable to accessible
        field2.setAccessible(true);
        // assign it to a local variable
        endComp = (boolean) field2.getBoolean(manager);
	}
	
	
	@Test
	public void testSetPlayers() {
		// Check that the program returns the correct output if it has an empty .txt file
		assertNotNull("Cant use a .txt file with no teams in it",teams);
	}

	@Test
	public void testHasNextMatch(){
		// Empty the queue to put the hasNextMatch() method into the if loop for if the queue is empty, which should return that there isn't a next match
		// Therefore it must return false
		Queue.clear();
		assertFalse("queue must be more than two to have a next match", manager.hasNextMatch());
	}

	@Test
	public void testNextMatchHasTwoTeams() {
		// Creates an instance of a next match and checks that the player 1 and 2 variables are assigned values
		Match m = manager.nextMatch();
		assertNotNull("Player 1 must have been assigned a team",m.getPlayer1());
		assertNotNull("Player 2 must have been assigned a team",m.getPlayer2());
	}
	
	public void testNextMatchTeamsArentSame() {
		// Creates an instance of a next match and checks that the players are not the same 
		Match m = manager.nextMatch();
		assertNotSame("Two players cannot be the same", m.getPlayer1() , m.getPlayer2());
	}
	
	@Test
	public void testNextMatchIsntLastMatch() {
		// Creates an  instance of a match and then checks that it is not the same as the last match
		Match m = manager.nextMatch();
		assertNotSame("Two matches cannot be the same", m, manager.nextMatch());
	}

	@Test
	public void testSetMatchWinnerIfThereAreNoPlayersLeftInQueue() {
		// Clears the queue of teams and sets the player 1 to be the winner
		// because the queue is empty, the program goes into the first if statement to set the queueCompleted variable to true.
		// It then goes into the other if condition as the player1 boolean is set to true, and adds the winner to the queue
		// This means that the queueCompleted variable should be false again, so this test should pass if it's false.
		Queue.clear();
		manager.setMatchWinner(true);
		assertFalse("QueueCompleted must be true if there are no teams left in queue, but then must be false once the winner has been added to the queue", endComp);
	}

	@Test
	public void testSetMatchWinnerIfPlayerIsFalse() {
		// Empties the queue so that the competition must end and sets the player 2 to be the winner
		// ensures that the test will pass if there is a winner as the winner will be placed in the queue so it will be not be null
		Queue.clear();
		manager.setMatchWinner(false);
		assertNotNull("if a player has been set to win, this test should pass as the queue will not be null",Queue);
	}
	
	@Test
	public void testGetPosition() {
		// Checks that second place will be null because there is no runner up in singleelimination
		assertNull("there is no runner up in singleelimination", manager.getPosition(1));
		// Checks that the first place is not null as there must always be a winner
		assertNotNull("must be a winner", manager.getPosition(0));
	}

}
