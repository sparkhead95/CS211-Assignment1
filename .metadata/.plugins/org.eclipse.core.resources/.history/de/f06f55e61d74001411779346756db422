package uk.ac.aber.dcs.chh57.cs21120.assignment1;

import java.util.ArrayList;

import uk.ac.aber.dcs.bpt.cs21120.assignment1.IManager;
import uk.ac.aber.dcs.bpt.cs21120.assignment1.Match;
import uk.ac.aber.dcs.bpt.cs21120.assignment1.NoNextMatchException;

public class BubbleElimination implements IManager {
	
	//create the two queues that the teams will be placed in
	private ArrayQueue winnersQueue;
	private ArrayQueue unAddedQueue;
	//create the variable to define whether the competition has finished
	boolean queueCompleted = false;
	//local variables for the teams playing
	String matchedPlayer1;
    String matchedPlayer2;
    //boolean to define which queue the team was in before it is decided where they go after the match
	boolean winners;

	public void setPlayers(ArrayList<String> players) {
		//Instantiate the queues and define their size
		winnersQueue = new ArrayQueue(players.size());
		unAddedQueue = new ArrayQueue(players.size());
		//For each player in players add it to the winners queue at the start
		 for (String player : players) {
			 winnersQueue.enQ(player);
			 //System.out.println(player);
		 }
		 System.out.println("------------");
			    

	}

	public boolean hasNextMatch() {
		//If there is only one team left in the queue or queueCompleted is true then there cannot be a next match
		if ((unAddedQueue.length() < 1) || (queueCompleted)){
			return false;
		}
		else return true;
	}

	public Match nextMatch() throws NoNextMatchException {
		// TODO Auto-generated method stub
		return null;
	}

	public void setMatchWinner(boolean player1) {
		// TODO Auto-generated method stub

	}

	public String getPosition(int n) {
		// TODO Auto-generated method stub
		return null;
	}

}
