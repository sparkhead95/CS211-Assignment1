package uk.ac.aber.dcs.chh57.cs21120.assignment1;

import java.util.ArrayList;

import uk.ac.aber.dcs.bpt.cs21120.assignment1.IManager;
import uk.ac.aber.dcs.bpt.cs21120.assignment1.Match;
import uk.ac.aber.dcs.bpt.cs21120.assignment1.NoNextMatchException;

public class BubbleElimination implements IManager {
	
	//create the two queues that the teams will be placed in
	private ArrayQueue mainQueue;
	private ArrayQueue unAddedQueue;
	//create the variable to define whether the competition has finished
	boolean queueCompleted = false;
	//local variables for the teams playing
	String matchedPlayer1;
    String matchedPlayer2;
    String[] winnersLine;
    
    //boolean to define which queue the team was in before it is decided where they go after the match
	boolean unAdded;
	boolean oneWonOne = false;
	boolean twoWonOne = false;

	public void setPlayers(ArrayList<String> players) {
		//Instantiate the queues and define their size
		mainQueue = new ArrayQueue(players.size());
		unAddedQueue = new ArrayQueue(players.size());
		winnersLine = new String[players.size()];
		//For each player in players add it to the winners queue at the start
		 for (String player : players) {
			 unAddedQueue.enQ(player);
			 //System.out.println(player);
		 }
		 System.out.println("------------");
			    

	}

	public boolean hasNextMatch() {
		//If there is only one team left in the queue or queueCompleted is true then there cannot be a next match
		if ((unAddedQueue.length() < 1) || (queueCompleted)){
			return false;
		}
		else return true;
	}

	public Match nextMatch() throws NoNextMatchException {
		//Place the final team for each queue in a match together if there are no other teams in each queue
        if (mainQueue.length() == 0) {
                matchedPlayer1 = (String)unAddedQueue.deQ();
                matchedPlayer2 = (String)unAddedQueue.deQ();
                //Defines that the result team is a winner
                unAdded=true;
                oneWonOne = false;
                twoWonOne = false;
        }
        //If there are more players in the winners queue then make two from the winners queue have a match
        else if (mainQueue.length() >= 2) {
                matchedPlayer1 = (String)unAddedQueue.deQ();
                matchedPlayer2 = (String)mainQueue.deQ();
                //Defines that the result team is a winner
                unAdded = false;
                oneWonOne = false;
                twoWonOne = true;
        }
        else if (mainQueue.length() == 1) {
           System.out.println("Something went wrong. The main queue is of length 1 which means that an unadded team was not added.");
           System.exit(1);
        }
        else if (unAddedQueue.length() == 1) {
            
         }
        // Otherwise choose two from the losers queue to play
        //Create the match and put the teams in.
        Match match = new Match(matchedPlayer1,matchedPlayer2);
        return match;
	}

	public void setMatchWinner(boolean player1) {
		

		// If the team comes from the winners queue
			if (unAdded) {
				mainQueue.enQ(matchedPlayer1);
				mainQueue.enQ(matchedPlayer2);
				// and the player passed in through the manager is true
				if (player1) {
					oneWonOne = true;
					twoWonOne = false;
				} else {
					oneWonOne = false;
					twoWonOne = true;
				}
				// However if the team comes from the losers queue
			} else {
				// and player passed into the method is true- so player one is winner
				if (player1) {
					if (oneWonOne){
						unAdded = false;
						winnersLine[0].equals(matchedPlayer1);
					}
					else{
						mainQueue.enQ(matchedPlayer1);
					}
				} else {
					if (twoWonOne){
						unAdded = false;
						winnersLine[0].equals(matchedPlayer2);
					}
					else{
						mainQueue.enQ(matchedPlayer1);
					}
				}
				// Output how many teams are in each queue
		        System.out.println("In the main queue there are: " + mainQueue.length());
		        System.out.println("In the unadded queue there are: " + unAddedQueue.length());
		        System.out.println("In the winners line there are: " + winnersLine.length);
			}
		        

	}

	public String getPosition(int n) {
		// If the tournament has ended:
				if (queueCompleted == true) {
					// Check the value of n
					switch(n){
					// If it is 0, the manager wants the name of the team that came first
						case 0: return (winnersQueue.deQ().toString());
					// Else the name of the team that came second
						case 1: return (losersQueue.deQ().toString());
					}
				}
				// Else the method has been called early and the game isn't finished.
				else System.out.println("The game isn't finished.");
				return null;
	}

}
