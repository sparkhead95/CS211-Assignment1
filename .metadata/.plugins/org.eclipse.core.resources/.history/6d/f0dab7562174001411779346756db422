package uk.ac.aber.dcs.chh57.cs21120.assignment1;

import java.util.ArrayList;

import uk.ac.aber.dcs.bpt.cs21120.assignment1.IManager;
import uk.ac.aber.dcs.bpt.cs21120.assignment1.Match;
import uk.ac.aber.dcs.bpt.cs21120.assignment1.NoNextMatchException;

public class BubbleElimination implements IManager {
	
	//create the two queues that the teams will be placed in
	private ArrayQueue mainQueue;
	private ArrayQueue unAddedQueue;
	//create the variable to define whether the competition has finished
	boolean queueCompleted = false;
	//local variables for the teams playing
	String matchedPlayer1;
    String matchedPlayer2;
    String[] winnersLine;
    
    //boolean to define which queue the team was in before it is decided where they go after the match
	boolean unAdded;
	player1WonOne

	public void setPlayers(ArrayList<String> players) {
		//Instantiate the queues and define their size
		mainQueue = new ArrayQueue(players.size());
		unAddedQueue = new ArrayQueue(players.size());
		winnersLine = new String[players.size()];
		//For each player in players add it to the winners queue at the start
		 for (String player : players) {
			 unAddedQueue.enQ(player);
			 //System.out.println(player);
		 }
		 System.out.println("------------");
			    

	}

	public boolean hasNextMatch() {
		//If there is only one team left in the queue or queueCompleted is true then there cannot be a next match
		if ((unAddedQueue.length() < 1) || (queueCompleted)){
			return false;
		}
		else return true;
	}

	public Match nextMatch() throws NoNextMatchException {
		//Place the final team for each queue in a match together if there are no other teams in each queue
        if (mainQueue.length() == 0) {
                matchedPlayer1 = (String)unAddedQueue.deQ();
                matchedPlayer2 = (String)unAddedQueue.deQ();
                mainQueue.enQ(matchedPlayer1);
                mainQueue.enQ(matchedPlayer2);
                //Defines that the result team is a winner
                unAdded=true;
                wonOne = false;
        }
        //If there are more players in the winners queue then make two from the winners queue have a match
        else if (mainQueue.length() >= 2) {
                matchedPlayer1 = (String)unAddedQueue.deQ();
                matchedPlayer2 = (String)mainQueue.deQ();
                //Defines that the result team is a winner
                unAdded = false;
                player1WonOne = true;
        }
        // Otherwise choose two from the losers queue to play
        else {
                matchedPlayer1 = (String)losersQueue.deQ();
                matchedPlayer2 = (String)losersQueue.deQ();
                //Defines that the result team is a winner
                winners=false;
        }
        //Create the match and put the teams in.
        Match match = new Match(matchedPlayer1,matchedPlayer2);
        return match;
	}

	public void setMatchWinner(boolean player1) {
		

		// If the team comes from the winners queue
			if (unAdded) {
				// and the player passed in through the manager is true
				if (player1) {
					
				} else {
					// Vice versa here- Put player 2 in winners queue if manager has said that player1 is false
					winnersQueue.enQ(matchedPlayer2);
					// and player one in the losers queue
					losersQueue.enQ(matchedPlayer1);
				}
				// However if the team comes from the losers queue
			} else {
				// and player passed into the method is true- so player one is winner
				if (player1) {
					if (wonOne){
						unAdded = false;
					}
					else{
						
					}
					// put player 1 back in to the queue, discard player 2
					losersQueue.enQ(matchedPlayer1);
					// Otherwise put player 2 back in the queue and discard player 1
				} else {
					losersQueue.enQ(matchedPlayer2);

					}
				}
				// Output how many teams are in each queue
		        System.out.println("In the winners queue there are: " + winnersQueue.length());
		        System.out.println("In the losers queue there are: " + losersQueue.length());

	}

	public String getPosition(int n) {
		// TODO Auto-generated method stub
		return null;
	}

}
